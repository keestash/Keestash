on:
  push:

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      # tests
      - name: Composer Install
        uses: php-actions/composer@v5
        with:
          dev: yes
          args: --profile --ignore-platform-reqs
          php_version: 7.4

      - name: PHPUnit Tests
        uses: php-actions/phpunit@v3
        with:
          configuration: test/phpunit.xml
          memory_limit: 256M

      # end tests
      - name: end tests
        run: |
          rm config/config.php    # remove test config
          rm -r vendor/

      - name: Composer Install
        uses: php-actions/composer@v5
        with:
          dev: no
          args: --profile --ignore-platform-reqs
          php_version: 7.4

      - name: Build Project
        uses: actions/setup-node@v2
        with:
          node-version: '12.18.2'

      - run: npm install
      - run: npm run build:prod

      - name: Clean Up
        run: |
          cp config/config.sample.php config/config.php
          cd bin/ && php console.php general-api:compile-scss && cd ../
          rm -rf node_modules
          rm -rf .github .git config/phpstan config/vagrant
          rm -f .babelrc .editorconfig .eslintrc.js .gitignore Vagrantfile composer.json composer.lock package-lock.json package.json webpack.config.js output.log
          rm -rf test/ apps/*/Test/
          rm -rf apps/*/js/
          rm -rf apps/*/scss/
          cd ../
          pwd
          ls -ltra
          zip -r /tmp/nightly${{ github.sha }}.zip server
          chmod 777 /tmp/nightly${{ github.sha }}.zip
          ls -ltra /tmp
          echo ${{ steps.create_release.outputs.upload_url }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: nightly${{ github.sha }}
          release_name: nightly${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./tmp/nightly${{ github.sha }}.zip
          asset_name: nightly${{ github.sha }}.zip
          asset_content_type: application/zip