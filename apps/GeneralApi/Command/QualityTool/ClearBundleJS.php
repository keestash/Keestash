<?php
declare(strict_types=1);
/**
 * Keestash
 *
 * Copyright (C) <2019> <Dogan Ucar>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

namespace KSA\GeneralApi\Command\QualityTool;

use Keestash\Command\KeestashCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class ClearBundleJS extends KeestashCommand {

    protected static $defaultName = "general-api:clear-js";

    /** @var string $appRoot */
    private $appRoot = null;

    /** @var string $serverRoot */
    private $serverRoot = null;

    public function __construct(
        string $serverRoot
        , string $appRoot
    ) {
        parent::__construct(ClearBundleJS::$defaultName);

        $this->appRoot    = $appRoot;
        $this->serverRoot = $serverRoot;
    }

    protected function configure() {
        $this->setDescription("Removes Generated JS Files")
            ->setHelp("removes all files generated by webpack and stores as a bundle file");
    }

    protected function execute(InputInterface $input, OutputInterface $output) {

        $baseDist = "{$this->serverRoot}/lib/js/dist/base.bundle.js";
        $files    = glob($this->appRoot . "/*/js/dist/*.js");

        $this->writeInfo(
            json_encode($files)
            , $output
        );

        $files[]   = $baseDist;
        $fileCount = 0;

        foreach ($files as $file) {
            if (true === is_file($file)) {
                $removed = unlink($file);

                if (false === $removed) {
                    $this->writeError(
                        "could not remove $file"
                        , $output
                    );
                    continue;
                }
                $fileCount++;
            }
        }

        $this->writeInfo("removed $fileCount files", $output);
        return KeestashCommand::RETURN_CODE_RAN_SUCCESSFUL;

    }

}
